# Ex.No: 13 Student performance prediction using machine learning
### DATE:  13/05/2025                                                                          
### REGISTER NUMBER : 212222040009
### AIM: 
To write a program to train the classifier for Student performance prediction using machine learning
###  Algorithm:
1.Load the dataset from CSV

2.Clean the data (remove ID, encode text fields)

3.Label students as High or Low Performer based on CGPA ≥ 3.0

4.Split data into training and testing sets

5.Train a Random Forest Classifier model

6.Evaluate the model’s accuracy

7.Take user input (program, gender, CGPA levels, etc.)

8.Predict student performance using the trained model

9.Display result (High Performer  / Low Performer )


### Program:
```
import pandas as pd
df = pd.read_csv("/content/plant_growth_data.csv")
df.head()
df.info()
df.isna().sum()
df.duplicated().sum()

from sklearn.model_selection import GridSearchCV, train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score


classifiers = {
    'RandomForest': (RandomForestClassifier(), {
        'n_estimators': [100, 200, 300, 400],
        'max_depth': [None, 10, 20, 30],
        'min_samples_split': [2, 5, 10],
        'min_samples_leaf': [1, 2, 4],
        'bootstrap': [True, False]
    })}

for name, (clf, params) in classifiers.items():
    grid_search = GridSearchCV(clf, params, cv=3, scoring='accuracy', n_jobs=-1)
    grid_search.fit(X, y)
    y_pred = grid_search.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"{name}: Best Params: {grid_search.best_params_}, Accuracy: {accuracy:.4f}")
```
### Output:


### Result:
Thus the system was trained successfully and the prediction was carried out.
